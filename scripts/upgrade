#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --line_match="Stopped" --log_path=systemd
ynh_systemd_action --service_name=$app-ui --action="stop" --line_match="Stopped" --log_path=systemd

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Removing previously installed iframely
if ynh_exec_warn_less yunohost service status $app-iframely >/dev/null
then
	ynh_script_progression --message="Removing $app-iframely service integration..."
	yunohost service remove $app-iframely
	ynh_app_setting_delete --app=$app  --key=random
	ynh_app_setting_delete --app=$app  --key=port_iframely
	ynh_remove_systemd_config --service=$app-iframely
fi

# Removing previously installed pict-rs
if ynh_exec_warn_less yunohost service status $app-pict-rs >/dev/null
then
	ynh_script_progression --message="Removing $app-pict-rs service integration..."
	yunohost service remove $app-pict-rs
fi
ynh_remove_systemd_config --service=$app-pict-rs
ynh_secure_remove --file="$install_dir/pict-rs"
ynh_app_setting_delete --app=$app --key=port_pictrs

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress the source of lemmy from app.src to his build directory
	ynh_setup_source --dest_dir="$install_dir/build-lemmy/"
	ynh_setup_source --dest_dir="$install_dir/build-lemmy-ui/"
	ynh_setup_source --dest_dir="$install_dir/lemmy-ui/lemmy-translations/" --source_id="lemmy-translations"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_use_nodejs
ln -fs /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# INSTALL SHARP
#=================================================

pushd $install_dir/lemmy-ui
 	ynh_use_nodejs
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH yarn add sharp
popd

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MAKE UPGRADE
#=================================================
ynh_script_progression --message="Making upgrade..." --weight=1

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Install lemmy-ui
	pushd $install_dir/build-lemmy-ui
		./docker-image-extract dessalines/lemmy-ui:$(ynh_app_upstream_version)
	popd
	mkdir -p "$install_dir/lemmy-ui/"
	rsync -a "$install_dir/build-lemmy-ui/output/app/" "$install_dir/lemmy-ui/"
	ynh_secure_remove --file="$install_dir/build-lemmy-ui"

	# Install lemmy
	pushd $install_dir/build-lemmy
		./docker-image-extract dessalines/lemmy:$(ynh_app_upstream_version)
	popd
	mkdir -p "$install_dir/lemmy/"
	mv -f "$install_dir/build-lemmy/output/app/lemmy" "$install_dir/lemmy/lemmy"
	ynh_secure_remove --file="$install_dir/build-lemmy"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

mkdir -p "$install_dir/lemmy/"
ynh_add_config --template="../conf/lemmy.hjson" --destination="$install_dir/config/config.hjson"

chmod 400 "$install_dir/config/config.hjson"
chown $app:$app "$install_dir/config/config.hjson"

#=================================================
# CREATE EXTENSION IF NOT EXISTS pgcrypto
#=================================================
ynh_script_progression --message="Creating pgcrypto extension if needed..." --weight=1

ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS pgcrypto;" --database="$db_name"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app" --template="lemmy.service"
ynh_add_systemd_config --service="$app-ui" --template="lemmy-ui.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

mkdir -p "/var/log/$app"
chmod 750 "/var/log/$app"
chmod -R o-rwx "/var/log/$app"
chown -R $app:$app "/var/log/$app"

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --log="/var/log/$app/$app.log"
yunohost service add $app-ui --log="/var/log/$app/$app-ui.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --line_match="Starting http server at" --log_path="/var/log/$app/$app.log"
ynh_systemd_action --service_name=$app-ui --action="start" --line_match="http://0.0.0.0" --log_path="/var/log/$app/$app-ui.log"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
